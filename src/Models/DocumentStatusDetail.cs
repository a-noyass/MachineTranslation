// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

using Microsoft.Rest;
using Newtonsoft.Json;
using System.Linq;

namespace Azure.AI.Translator.Models
{
    public partial class DocumentStatusDetail
    {
        /// <summary>
        /// Initializes a new instance of the DocumentStatusDetail class.
        /// </summary>
        public DocumentStatusDetail()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DocumentStatusDetail class.
        /// </summary>
        /// <param name="path">Location of the document or folder</param>
        /// <param name="createdDateTimeUtc">Operation created date
        /// time</param>
        /// <param name="lastActionDateTimeUtc">Date time in which the
        /// operation's status has been updated</param>
        /// <param name="status">Possible values include: 'NotStarted',
        /// 'Running', 'Succeeded', 'Failed', 'Cancelled', 'Cancelling'</param>
        /// <param name="to">To language</param>
        /// <param name="detectedLanguage">Detected language of the original
        /// document (to be implemented)</param>
        /// <param name="progress">Progress of the translation if
        /// available</param>
        /// <param name="id">Document Id</param>
        public DocumentStatusDetail(string path, System.DateTime createdDateTimeUtc, System.DateTime lastActionDateTimeUtc, string status, string to, string detectedLanguage = default(string), ErrorV2 error = default(ErrorV2), double? progress = default(double?), System.Guid? id = default(System.Guid?))
        {
            Path = path;
            CreatedDateTimeUtc = createdDateTimeUtc;
            LastActionDateTimeUtc = lastActionDateTimeUtc;
            Status = status;
            DetectedLanguage = detectedLanguage;
            To = to;
            Error = error;
            Progress = progress;
            Id = id;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets location of the document or folder
        /// </summary>
        [JsonProperty(PropertyName = "path")]
        public string Path { get; set; }

        /// <summary>
        /// Gets or sets operation created date time
        /// </summary>
        [JsonProperty(PropertyName = "createdDateTimeUtc")]
        public System.DateTime CreatedDateTimeUtc { get; set; }

        /// <summary>
        /// Gets or sets date time in which the operation's status has been
        /// updated
        /// </summary>
        [JsonProperty(PropertyName = "lastActionDateTimeUtc")]
        public System.DateTime LastActionDateTimeUtc { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'NotStarted', 'Running',
        /// 'Succeeded', 'Failed', 'Cancelled', 'Cancelling'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets detected language of the original document (to be
        /// implemented)
        /// </summary>
        [JsonProperty(PropertyName = "detectedLanguage")]
        public string DetectedLanguage { get; set; }

        /// <summary>
        /// Gets or sets to language
        /// </summary>
        [JsonProperty(PropertyName = "to")]
        public string To { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "error")]
        public ErrorV2 Error { get; set; }

        /// <summary>
        /// Gets or sets progress of the translation if available
        /// </summary>
        [JsonProperty(PropertyName = "progress")]
        public double? Progress { get; set; }

        /// <summary>
        /// Gets or sets document Id
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Path == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Path");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (To == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "To");
            }
            if (Progress != null)
            {
                if (Progress > 1)
                {
                    throw new ValidationException(ValidationRules.InclusiveMaximum, "Progress", 1);
                }
                if (Progress < 0)
                {
                    throw new ValidationException(ValidationRules.InclusiveMinimum, "Progress", 0);
                }
            }
        }
    }
}
