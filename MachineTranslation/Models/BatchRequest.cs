// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Azure.AI.Translator.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Definition for the input batch translation request
    /// </summary>
    public partial class BatchRequest
    {
        /// <summary>
        /// Initializes a new instance of the BatchRequest class.
        /// </summary>
        public BatchRequest()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the BatchRequest class.
        /// </summary>
        /// <param name="targets">Location of the destination for the
        /// output</param>
        /// <param name="storageType">Possible values include: 'Folder',
        /// 'File'</param>
        public BatchRequest(SourceInput source, IList<TargetInput> targets, StorageType storageType = default(StorageType))
        {
            Source = source;
            Targets = targets;
            StorageType = storageType;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public SourceInput Source { get; set; }

        /// <summary>
        /// Gets or sets location of the destination for the output
        /// </summary>
        [JsonProperty(PropertyName = "targets")]
        public IList<TargetInput> Targets { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Folder', 'File'
        /// </summary>
        [JsonProperty(PropertyName = "storageType")]
        public StorageType StorageType { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
            if (Targets == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Targets");
            }
            if (Source != null)
            {
                Source.Validate();
            }
            if (Targets != null)
            {
                foreach (var element in Targets)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
